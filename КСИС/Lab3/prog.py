import socket
import threading
import time

PORT = 5000
TCP_PORT = 6000
BUFFER_SIZE = 1024
my_ip = "192.168.1.102"
user_list = set()  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
continue_signal = True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (UDP —Å–µ—Ä–≤–µ—Ä)
def receive_messages():
    global continue_signal
    # –°–æ–∑–¥–∞–µ–º UDP —Å–æ–∫–µ—Ç (IPv4, UDP)
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç –∫ IP –∏ –ø–æ—Ä—Ç—É
    server_socket.bind((my_ip, PORT))
    while continue_signal:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            _, addr = server_socket.recvfrom(BUFFER_SIZE)
            user_ip = addr[0]
            if user_ip != my_ip and user_ip not in user_list:
                print(f"üì© –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ({user_ip})")
                user_list.add(user_ip)
        except:
            break

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö —É–∑–ª–æ–≤ (UDP –∫–ª–∏–µ–Ω—Ç)
def send_broadcast():
    global continue_signal
    # –°–æ–∑–¥–∞–µ–º UDP –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–æ–∫–µ—Ç (IPv4, UDP)
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    # –í–∫–ª—é—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –≤ –ø–æ–¥—Å–µ—Ç–∏
    client_socket.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
    broadcast_address = (f"{my_ip[:my_ip.rfind('.')]+'.255'}", PORT)
    while continue_signal:
        try:
            client_socket.sendto("".encode(), broadcast_address)
            time.sleep(5)
        except:
            break
    client_socket.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –∫–∞–∂–¥—ã–º —É–∑–ª–æ–º
def establish_tcp_connections():
    global continue_signal
    while continue_signal:
        for user_ip in list(user_list):
            try:
                # –°–æ–∑–¥–∞–µ–º TCP —Å–æ–∫–µ—Ç (IPv4, TCP)
                client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ IP –∏ TCP –ø–æ—Ä—Ç—É
                client_socket.connect((user_ip, TCP_PORT))
                message = input()
                if message == "0":
                    continue_signal = False
                    message = "–í—ã—Ö–æ–∂—É –∏–∑ —á–∞—Ç–∞"
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                client_socket.sendall(message.encode())
                client_socket.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            except:
                break
        time.sleep(10)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–µ–º–∞ –≤—Ö–æ–¥—è—â–∏—Ö TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (TCP —Å–µ—Ä–≤–µ—Ä)
def tcp_server():
    global continue_signal
    # –°–æ–∑–¥–∞–µ–º TCP —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Å–æ–∫–µ—Ç (IPv4, TCP)
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç –∫ IP –∏ –ø–æ—Ä—Ç—É –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    server_socket.bind((my_ip, TCP_PORT))
    while continue_signal:
        try:
            server_socket.listen(1)
            conn, addr = server_socket.accept()
            data = conn.recv(BUFFER_SIZE).decode()
            print(f"{data}({addr})")
            conn.close()
        except:
            break

# –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
receive_thread = threading.Thread(target=receive_messages)
send_thread = threading.Thread(target=send_broadcast)
tcp_server_thread = threading.Thread(target=tcp_server)
tcp_client_thread = threading.Thread(target=establish_tcp_connections)

receive_thread.start()
send_thread.start()
tcp_server_thread.start()
tcp_client_thread.start()

# –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
receive_thread.join()
send_thread.join()
tcp_server_thread.join()
tcp_client_thread.join()

print("üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã!")

#–ú–µ—Ç–æ–¥ setsockopt() —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ socket.SOL_SOCKET, socket.SO_REUSEADDR, 1 –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
#–£—Ä–æ–≤–µ–Ω—å —Å–æ–∫–µ—Ç–∞ (socket.SOL_SOCKET): –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –º—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏—é –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–∞–º–æ–≥–æ —Å–æ–∫–µ—Ç–∞, –∞ –Ω–µ –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, TCP –∏–ª–∏ UDP).
#–û–ø—Ü–∏—è SO_REUSEADDR: –≠—Ç–∞ –æ–ø—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∫–µ—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å (IP –∏ –ø–æ—Ä—Ç), –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –Ω–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –¥—Ä—É–≥–∏–º —Å–æ–∫–µ—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –º–æ–≥ –±—ã—Ç—å
#–∑–∞–∫—Ä—ã—Ç –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ TIME_WAIT. –ë–µ–∑ —ç—Ç–æ–π –æ–ø—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–≥–æ –∂–µ –∞–¥—Ä–µ—Å–∞, —á—Ç–æ
#–ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –æ—à–∏–±–∫–µ ¬´Address already in use¬ª, –µ—Å–ª–∏ –≤—ã –ø–æ–ø—ã—Ç–∞–µ—Ç–µ—Å—å –±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä.
#–ó–Ω–∞—á–µ–Ω–∏–µ 1: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ–µ 1 (—á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç True), –º—ã –≤–∫–ª—é—á–∞–µ–º —ç—Ç—É –æ–ø—Ü–∏—é.